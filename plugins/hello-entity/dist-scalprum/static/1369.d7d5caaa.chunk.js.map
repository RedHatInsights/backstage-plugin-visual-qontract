{"version":3,"file":"static/1369.d7d5caaa.chunk.js","mappings":"2RAiBO,SAASA,IACZ,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,KAEbC,GAASC,EAAAA,EAAAA,QAAOC,EAAAA,eAGfC,EAAUC,IAAeC,EAAAA,EAAAA,UAA8B,CAAC,GAGzDC,EAAaN,EAAOO,UAAU,oBAGpCC,EAAAA,EAAAA,YAAU,KACNC,GAAkB,GACnB,IAGH,MAAMA,EAAmB,KAErBC,MAAM,GAAGJ,kCAA2CR,EAAOa,SAASC,OAAQ,CACxEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,SAAU,GAAGpB,EAAOa,SAASC,8BAEnDO,MAAKhB,GAAYA,EAASiB,SAC1BD,MAAKE,GAAQjB,EAAYiB,EAAKD,QAC9BE,OAAMC,GAAUnB,EAAY,CAAEc,SAAU,WAAW,EAY5D,OAAO,UAACM,EAAAA,GAAIA,CAACC,QAAQ,O,WACjB,SAACC,EAAAA,GAAMA,CAACC,MAAM,eAAeC,SAAS,uBAEtC,UAACC,EAAAA,GAAOA,C,WACJ,SAACC,EAAAA,GAAaA,CAACH,MAAM,sBAErB,SAACI,EAAAA,EAAIA,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,S,UAClC,SAACH,EAAAA,EAAIA,CAACI,MAAI,E,UACN,SAACC,EAAAA,GAAQA,CAACT,MAAM,iB,UACZ,UAACU,EAAAA,EAAUA,CAACC,QAAQ,Q,UAAQ,cAfvCnC,EAGEA,EAASe,SAFL,aAemC,kBAOtD,C","sources":["webpack://internal.backstage-plugin-hello-entity/./src/components/HelloEntityComponent/HelloEntityComponent.tsx"],"sourcesContent":["// We're importing useState and useEffect from React for state and hooks\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport {\n    InfoCard,\n    Header,\n    Page,\n    Content,\n    ContentHeader,\n} from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\n// These will let us get info about our backstage configuration\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\n\n// A super generic type for the response from the backend\ntype HelloEntityResponse = Record<string, any>;\n\nexport function HelloEntityComponent() {\n    const { entity } = useEntity();\n    // Get the config object from backstage\n    const config = useApi(configApiRef);\n\n    // Set up some state for the response from the backend\n    const [response, setResponse] = useState<HelloEntityResponse>({});\n\n    // Get the backend URL from the config\n    const backendUrl = config.getString('backend.baseUrl');\n\n    // Fetch the hello entity data when the component loads\n    useEffect(() => {\n        fetchHelloEntity();\n    }, []);\n\n    // Function to fetch the hello entity data from the backend proxy\n    const fetchHelloEntity = () => {\n        // Notice we are constructing the URL with the backend URL we grabbed from the config\n        fetch(`${backendUrl}/api/proxy/hello-entity/hello-${entity.metadata.name}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ greeting: `${entity.metadata.name} (via the Internet)` }),\n        })\n            .then(response => response.json())\n            .then(data => setResponse(data.json))\n            .catch(_error => setResponse({ greeting: \"Error\" }));\n    }\n\n    // Function to read the app name from the response\n    // If the response is not loaded yet, we'll show a loading message\n    const getGreeting = () => {\n        if (!response) {\n            return 'Loading...';\n        }\n        return response.greeting\n    }\n\n    return <Page themeId=\"tool\">\n        <Header title=\"Hello World!\" subtitle=\"Optional subtitle\">\n        </Header>\n        <Content>\n            <ContentHeader title=\"My Plugin Header\">\n            </ContentHeader>\n            <Grid container spacing={3} direction=\"column\">\n                <Grid item>\n                    <InfoCard title=\"My Plugin Card\">\n                        <Typography variant=\"body1\">\n                            Hello from {getGreeting()}!\n                        </Typography>\n                    </InfoCard>\n                </Grid>\n            </Grid>\n        </Content>\n    </Page>\n}"],"names":["HelloEntityComponent","entity","useEntity","config","useApi","configApiRef","response","setResponse","useState","backendUrl","getString","useEffect","fetchHelloEntity","fetch","metadata","name","method","headers","body","JSON","stringify","greeting","then","json","data","catch","_error","Page","themeId","Header","title","subtitle","Content","ContentHeader","Grid","container","spacing","direction","item","InfoCard","Typography","variant"],"sourceRoot":""}