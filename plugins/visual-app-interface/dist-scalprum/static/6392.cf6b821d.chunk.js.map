{"version":3,"file":"static/6392.cf6b821d.chunk.js","mappings":"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","sources":["webpack://internal.backstage-plugin-visual-app-interface/./src/components/VisualAppInterfaceComponent/query.tsx","webpack://internal.backstage-plugin-visual-app-interface/./src/components/VisualAppInterfaceComponent/VisualAppInterfaceComponent.tsx"],"sourcesContent":["import { gql } from 'graphql-request';\n\n\nexport const AppQuery = gql`\nquery App($path: String) {\n  apps_v1(path: $path) {\n    path\n    name\n    description\n    onboardingStatus\n    grafanaUrls {\n      title\n      url\n    }\n    serviceDocs\n    serviceOwners {\n      name\n      email\n    }\n    escalationPolicy {\n      name\n      path\n      description\n      channels {\n        jiraBoard {\n          name\n          path\n        }\n        email\n        pagerduty {\n          name\n          path\n        }\n        nextEscalationPolicy {\n          name\n          path\n        }\n        slackUserGroup {\n          name\n          path\n        }\n      }\n    }\n    dependencies {\n      path\n      name\n      statusPage\n      SLA\n    }\n    quayRepos {\n      org {\n        name\n      }\n      items {\n        name\n        description\n        public\n      }\n    }\n    serviceDocs\n    endPoints {\n      name\n      description\n      url\n    }\n    codeComponents {\n      name\n      resource\n      url\n    }\n    namespaces {\n      path\n      name\n      description\n      cluster {\n        name\n        path\n        jumpHost {\n          hostname\n        }\n      }\n    }\n    childrenApps {\n      path\n      name\n      description\n      onboardingStatus\n    }\n  }\n  reports_v1 {\n    path\n    app {\n      name\n    }\n    name\n    date\n  }\n  saas_files_v2 {\n    path\n    name\n    app {\n      name\n    }\n    pipelinesProvider {\n      provider\n      ... on PipelinesProviderTekton_v1 {\n        namespace {\n          name\n          cluster {\n            consoleUrl\n          }\n        }\n        defaults {\n          pipelineTemplates {\n            openshiftSaasDeploy {\n              name\n            }\n          }\n        }\n        pipelineTemplates {\n          openshiftSaasDeploy {\n            name\n          }\n        }\n      }\n    }\n    resourceTemplates {\n      targets {\n        namespace {\n          name\n          environment {\n            name\n          }\n        }\n      }\n    }\n  }\n  scorecards_v2 {\n    path\n    app {\n      path\n      name\n    }\n  }\n}\n`;\n\n","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Grid,\n  Link,\n  Chip,\n  Table,\n  TableContainer,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableCell,\n  Paper\n} from '@material-ui/core';\nimport {\n  InfoCard,\n  Page,\n  Content,\n} from '@backstage/core-components';\nimport { request } from 'graphql-request';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { AppQuery } from './query';\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\n\nexport const VisualAppInterfaceComponent = () => {\n\n  //I'm not creating a type for the app object because it's a lot of fields and I'm not sure what they all are\n  type AppInterfaceApp = Record<string, any>;\n\n  // Get Backstage objects\n  const config = useApi(configApiRef);\n  const { entity } = useEntity();\n\n  // Constants\n  const backendUrl = config.getString('backend.baseUrl');\n  const proxyUrl = `${backendUrl}/api/proxy/visual-app-interface/graphql`\n  const gitlabBaseURL = `https://gitlab.cee.redhat.com/service/app-interface/-/blob/master/data/`\n\n  // Stage\n  const [app, setApp] = useState<AppInterfaceApp>({});\n  const [appLoaded, setAppLoaded] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n\n  // Get the app interface data on load\n  useEffect(() => {\n    const variables = { path: getAppInterfacePath() };\n    request(proxyUrl, AppQuery, variables)\n      .then((data: any) => {\n        //Set the app info from data as a AppInterfaceApp\n        setAppLoaded(true)\n        setApp(data.apps_v1[0])\n        console.log(data.apps_v1[0])\n      })\n      .catch((_error) => {\n        setError(true)\n      });\n  }, []);\n\n  // Function to get the app interface path\n  const getAppInterfacePath = () => {\n    const platform = entity?.metadata?.labels?.platform\n    const service = entity?.metadata?.labels?.service\n    return `/services/${platform}/${service}/app.yml`\n  }\n\n  const friendlyAppName = () => {\n    return app.name.charAt(0).toUpperCase() + app.name.slice(1)\n  }\n\n  const DependencyTable = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Dependencies\n      </Typography>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Status Page</TableCell>\n              <TableCell>SLO</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {app.dependencies.map((dependency: any) => (\n              <TableRow key={dependency.path}>\n                <TableCell>{dependency.name}</TableCell>\n                <TableCell>\n                  <Link target=\"_blank\" href={dependency.statusPage}>\n                    {dependency.statusPage}\n                  </Link>\n                </TableCell>\n                <TableCell>{dependency.SLA}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Grid>\n  }\n\n  const EscalationPolicy = () => {\n    return <Grid item>\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item>\n          <Typography variant=\"button\">\n            Escalation Policy\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            {app.escalationPolicy.description}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} direction=\"row\">\n        <Grid item>\n          <Typography variant=\"body1\">\n            Name\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            {app.escalationPolicy.name}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} direction=\"row\">\n        <Grid item>\n          <Typography variant=\"body1\">\n            Path\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            <Link target=\"_blank\" href={`${gitlabBaseURL}${app.escalationPolicy.path}`}>\n              {app.escalationPolicy.path}\n            </Link>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} direction=\"row\">\n        <Grid item>\n          <Typography variant=\"body1\">\n            Email\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            <Link target=\"_blank\" href={`mailto:${app.escalationPolicy.channels.email}`}>\n              {app.escalationPolicy.channels.email}\n            </Link>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} direction=\"row\">\n        <Grid item>\n          <Typography variant=\"body1\">\n            Jira Board\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            <Link target=\"_blank\" href={`${gitlabBaseURL}${app.escalationPolicy.channels.jiraBoard[0].path}`}>\n              {app.escalationPolicy.channels.jiraBoard[0].name}\n            </Link>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  }\n\n  const Description = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Description\n      </Typography>\n      <Typography variant=\"body1\">\n        {app.description}\n      </Typography>\n    </Grid>\n  }\n\n  const GrafanaURLs = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Grafana URLs\n      </Typography>\n      <Typography variant=\"body1\">\n        {app.grafanaUrls.map((url: any) => <Link\n          href={url.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >{url.title}</Link>)}\n      </Typography>\n    </Grid>\n  }\n\n  const OnBoardingStatus = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Onboarding Status\n      </Typography>\n      <Typography variant=\"body1\">\n        <Chip color=\"primary\" label={app.onboardingStatus} style={{ backgroundColor: '#00AF11' }} />\n      </Typography>\n    </Grid>\n  }\n\n  const ServiceOwners = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Service Owners\n      </Typography>\n      <Typography variant=\"body1\">\n        {app.serviceOwners.map((owner: any) => <Link\n          href={`mailto:${owner.email}`}\n        >{owner.name}</Link>)}\n      </Typography>\n    </Grid>\n  }\n\n  const SlackUserGroups = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Slack User Group\n      </Typography>\n      <Typography variant=\"body1\">\n        <Link target=\"_blank\" href={`${gitlabBaseURL}${app.escalationPolicy.channels.slackUserGroup[0].path}`}>\n          {app.escalationPolicy.channels.slackUserGroup[0].name}\n        </Link>\n      </Typography>\n    </Grid>\n  }\n\n  const NextEscalationPolicy = () => {\n    return <Grid item>\n      <Typography variant=\"button\">\n        Next Escalation Policy\n      </Typography>\n      <Typography variant=\"body1\">\n        <Link target=\"_blank\" href={`${gitlabBaseURL}${app.escalationPolicy.channels.nextEscalationPolicy.path}`}>\n          {app.escalationPolicy.channels.nextEscalationPolicy.name}\n        </Link>\n      </Typography>\n    </Grid>\n  }\n\n  if (error) {\n    return <Page themeId=\"tool\">\n      <Content>\n        <Grid container spacing={3} direction=\"column\">\n          <Grid item>\n            <InfoCard title=\"App Interface\">\n              <Typography variant=\"body1\">\n                Error loading app interface data.\n              </Typography>\n            </InfoCard>\n          </Grid>\n        </Grid>\n      </Content>\n    </Page>\n  }\n\n  if (!appLoaded) {\n    return <Page themeId=\"tool\">\n      <Content>\n        <Grid container spacing={3} direction=\"column\">\n          <Grid item>\n            <InfoCard title=\"App Interface\">\n              <Typography variant=\"body1\">\n                Loading...\n              </Typography>\n            </InfoCard>\n          </Grid>\n        </Grid>\n      </Content>\n    </Page>\n  }\n\n  return <Page themeId=\"tool\">\n    <Content>\n      <InfoCard title={friendlyAppName()}>\n        <Grid container spacing={3} direction=\"column\">\n          <Description />\n          <GrafanaURLs />\n          <OnBoardingStatus />\n          <ServiceOwners />\n          <EscalationPolicy />\n          <SlackUserGroups />\n          <NextEscalationPolicy />\n          <DependencyTable />\n        </Grid>\n      </InfoCard>\n    </Content>\n  </Page>\n}\n"],"names":["AppQuery","gql","VisualAppInterfaceComponent","config","useApi","configApiRef","entity","useEntity","proxyUrl","getString","gitlabBaseURL","app","setApp","useState","appLoaded","setAppLoaded","error","setError","useEffect","variables","path","getAppInterfacePath","request","then","data","apps_v1","console","log","catch","_error","metadata","labels","platform","service","DependencyTable","Grid","item","Typography","variant","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","dependencies","map","dependency","name","Link","target","href","statusPage","SLA","EscalationPolicy","container","spacing","direction","escalationPolicy","description","channels","email","jiraBoard","Description","GrafanaURLs","grafanaUrls","url","rel","title","OnBoardingStatus","Chip","color","label","onboardingStatus","style","backgroundColor","ServiceOwners","serviceOwners","owner","SlackUserGroups","slackUserGroup","NextEscalationPolicy","nextEscalationPolicy","Page","themeId","Content","InfoCard","charAt","toUpperCase","slice"],"sourceRoot":""}