{"version":3,"file":"static/1613.d0efdf1d.chunk.js","mappings":"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","sources":["webpack://internal.backstage-plugin-visual-app-interface/../../node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","startsWith","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","random","toString","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","DOMException","name","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","keyMatch","optional","param","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","dataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","pendingNavigationController","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","currentLocation","toPaths","getSavedScrollPosition","async","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","pendingActionData","pendingError","request","createClientSideRequest","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","_temp2","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","convertFormDataToSearchParams","convertSearchParamsToFormData","append","isInitialLoad","values","currentUrl","nextUrl","boundaryId","navigationMatches","boundaryMatches","getLoaderMatchesUntilBoundary","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","context","requestContext","handlerError","isStaticRequest","protocol","isSameBasename","isRouteRequest","contentType","statusCode","_result$init","_result$init2","deferred","isDeferredData","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","getAll","Symbol"],"sourceRoot":""}